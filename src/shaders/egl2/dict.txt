<NML=1.0>

<PSSM=
	<4Split="
			if	(frag_viewpos.z < pssm_0_slice_distance)
			pcf = ComputePCF(frag_viewpos, pssm_0_projection_matrix, pssm_0, 1.5);
	else	if	(frag_viewpos.z < pssm_1_slice_distance)
			pcf = ComputePCF(frag_viewpos, pssm_1_projection_matrix, pssm_1, 1.5 * pssm_0_slice_distance / (pssm_1_slice_distance - pssm_0_slice_distance));
	else	if	(frag_viewpos.z < pssm_2_slice_distance)
			pcf = ComputePCF(frag_viewpos, pssm_2_projection_matrix, pssm_2, 1.5 * pssm_0_slice_distance / (pssm_2_slice_distance - pssm_1_slice_distance));
	else	if	(frag_viewpos.z < pssm_3_slice_distance)
	{
		pcf = ComputePCF(frag_viewpos, pssm_3_projection_matrix, pssm_3, 1.5 * pssm_0_slice_distance / (pssm_3_slice_distance - pssm_2_slice_distance));

		float	ramp_len = (pssm_3_slice_distance - pssm_2_slice_distance) * 0.25;
		float	ramp_k = clamp((frag_viewpos.z - (pssm_3_slice_distance - ramp_len)) / ramp_len, 0.0, 1.0);
		pcf = pcf * (1.0 - ramp_k) + ramp_k;
	}
	">
	<3Split="
			if	(frag_viewpos.z < pssm_0_slice_distance)
			pcf = ComputePCF(frag_viewpos, pssm_0_projection_matrix, pssm_0, 1.5);
	else	if	(frag_viewpos.z < pssm_1_slice_distance)
			pcf = ComputePCF(frag_viewpos, pssm_1_projection_matrix, pssm_1, 1.5 * pssm_0_slice_distance / (pssm_1_slice_distance - pssm_0_slice_distance));
	else	if	(frag_viewpos.z < pssm_2_slice_distance)
	{
		pcf = ComputePCF(frag_viewpos, pssm_2_projection_matrix, pssm_2, 1.5 * pssm_0_slice_distance / (pssm_2_slice_distance - pssm_1_slice_distance));

		float	ramp_len = (pssm_2_slice_distance - pssm_1_slice_distance) * 0.25;
		float	ramp_k = clamp((frag_viewpos.z - (pssm_2_slice_distance - ramp_len)) / ramp_len, 0.0, 1.0);
		pcf = pcf * (1.0 - ramp_k) + ramp_k;
	}
	">
	<2Split="
			if	(frag_viewpos.z < pssm_0_slice_distance)
			pcf = ComputePCF(frag_viewpos, pssm_0_projection_matrix, pssm_0, 1.5);
	else	if	(frag_viewpos.z < pssm_1_slice_distance)
	{
		pcf = ComputePCF(frag_viewpos, pssm_1_projection_matrix, pssm_1, 1.5 * pssm_0_slice_distance / (pssm_1_slice_distance - pssm_0_slice_distance));

		float	ramp_len = (pssm_1_slice_distance - pssm_0_slice_distance) * 0.25;
		float	ramp_k = clamp((frag_viewpos.z - (pssm_1_slice_distance - ramp_len)) / ramp_len, 0.0, 1.0);
		pcf = pcf * (1.0 - ramp_k) + ramp_k;
	}
	">
>

<PCF=
	<4x4="
	float	ComputePCF(vec3 fvp, mat4 pjm, sampler2DShadow sampler, float k)
	{\
		vec4	flp = pjm * vec4(fvp, 1.0);
		vec3	pjb = ((flp.xyz / flp.w) + 1.0) * 0.5;
		float	pcf_tap = 0.0;
		for (int v = 0; v < 4; ++v)
			for (int u = 0; u < 4; ++u)
				pcf_tap += shadow2D(sampler, pjb + vec3(u, v, 0.0) * k * u_iss).r;
		return pcf_tap / 16.0;
	}
	">
	<3x3="
	float	ComputePCF(vec3 fvp, mat4 pjm, sampler2DShadow sampler, float k)
	{
		vec4	flp = pjm * vec4(fvp, 1.0);
		vec3	pjb = ((flp.xyz / flp.w) + 1.0) * 0.5;
		float	pcf_tap = 0.0;
		for (int v = 0; v < 3; ++v)
			for (int u = 0; u < 3; ++u)
				pcf_tap += shadow2D(sampler, pjb + vec3(u, v, 0.0) * k * u_iss).r;
		return pcf_tap / 9.0;
	}
	">
	<2x2="
	float	ComputePCF(vec3 fvp, mat4 pjm, sampler2DShadow sampler, float k)
	{
		vec4	flp = pjm * vec4(fvp, 1.0);
		vec3	pjb = ((flp.xyz / flp.w) + 1.0) * 0.5;
		float	pcf_tap = 0.0;
		for (int v = 0; v < 2; ++v)
			for (int u = 0; u < 2; ++u)
				pcf_tap += shadow2D(sampler, pjb + vec3(u, v, 0.0) * k * u_iss).r;
		return pcf_tap / 4.0;
	}
	">
	<1x1="
	float	ComputePCF(vec3 fvp, mat4 pjm, sampler2DShadow sampler, float k)
	{
		vec4	flp = pjm * vec4(fvp, 1.0);
		vec3	pjb = ((flp.xyz / flp.w) + 1.0) * 0.5;
		return shadow2D(sampler, pjb).r;
	}
	">
>

<UnpackGBuffer=
	<Integer="
	vec4 UnpackNormalDepth(vec2 UV)
	{
		vec4	pck = texture2D(gbuffer0, UV);
		vec2	nxy = pck.xy * 2.0 - 1.0;
		float	z = dot(pck.wz, vec2(1.0, 256.0)) * 1024.0 / 256.0;
		return vec4(nxy.x, nxy.y, -sqrt(1.0 - (nxy.x * nxy.x + nxy.y * nxy.y)), z);
	}
	">
	<Float="
	vec4 UnpackNormalDepth(vec2 UV) { return texture2D(gbuffer0, UV); }
	">
>
